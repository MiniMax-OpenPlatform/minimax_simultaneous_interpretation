该 API 支持基于文本到语音的同步生成，单次可处理最长 10,000 字符的文本。接口本身为无状态接口，即单次调用时，模型仅处理单次传入内容，不涉及业务逻辑，同时模型也不存储您传入的数据。
该接口支持以下功能：

支持 300+ 系统音色、复刻音色自主选择；
支持音量、语调、语速、输出格式调整；
支持按比例混音功能；
支持固定间隔时间控制；
支持多种音频规格、格式，包括：mp3, pcm, flac, wav。注：wav 仅在非流式输出下支持；
支持流式输出。

# 建立连接：调用 WebSocket 库函数（具体实现方式因编程语言或库函数而异），将请求头和 URL 传入以建立 WebSocket 连接。
## 建立连接请求
{
    "Authorization": "Bearer " + "<your_api_key>"
}
## 返回示例
{
    "session_id":"xxxx",
    "event":"connected_success",
    "trace_id":"0303a2882bf18235ae7a809ae0f3cca7",
    "base_resp":{
        "status_code": 0,
        "status_msg":"success"
    }
}

# 发送“任务开始”事件：发送"任务开始"事件则正式开始合成任务，当服务端返回的 task_started 事件时，标志着任务已成功开始。
只有在接收到该事件后，才能向服务器发送 task_continue 事件或 task_finish 事件。
## 请求示例
{
    "event":"task_start",
    "model":"speech-01-turbo",
    "language_boost":"Chinese",
    "voice_setting":{
        "voice_id":"male-qn-qingse",
        "speed":1,
        "vol":1,
        "pitch":0
    },
    "pronunciation_dict":{
        "tone":["处理/(chu3)(li3)", "危险/dangerous"]
    },
    "audio_setting":{
        "sample_rate":32000,
        "bitrate":128000,
        "format":"mp3",
        "channel":1
    }
}
## 返回示例
{
    "session_id":"xxxx",
    "event":"task_started",
    "trace_id":"0303a2882bf18235ae7a809ae0f3cca7",
    "base_resp":{
        "status_code": 0,
        "status_msg":"success"
    }
}

# 发送“任务继续”事件：当收到服务端返回的 task_started 事件后，任务正式开始，可通过发送 task_continue 事件发送要合成的文本，支持顺序发送多个 task_continue 事件。当最后一次收到服务端返回结果后超过 120s 没有发送新事件时，webSocket 连接自动断开。
## 请求示例
{
    "event": "task_continue",
    "text": "真正的危险不是计算机开始像人一样思考，而是人开始像计算机一样思考。计算机只是可以帮我们处理一些简单事务。"
}
## 返回示例
{
    "data": {
        "audio": "xxx"
    },
    "extra_info": {
      "audio_channel": 1,
      "audio_format": "mp3",
      "audio_length": 10472,
      "audio_sample_rate": 32000,
      "audio_size": 169908,
      "bitrate": 128000,
      "invisible_character_ratio": 0,
      "usage_characters": 101,
      "word_count": 52
    },
    "is_final": true,
    "session_id": "301871346491491",
    "trace_id": "04ee3794e2c9e4a6d5f99e77742f06fd",
    "base_resp": {
      "status_code": 0, 
      "status_msg": "success"
    }
}

# 发送“任务结束”事件：服务端收到 task_finish 事件后，会等待当前队列中所有合成任务完成后，关闭 WebSocket 连接并结束任务。
## 请求示例
{
    "event": "task_finish"
}
## 返回示例
{
    "session_id": "xxxx",
    "event": "task_finished",
    "trace_id": "0303a2882bf18235ae7a809ae0f3cca7",
    "base_resp": {
        "status_code": 0,
        "status_msg": "success"
    }
}

# “任务失败”事件：如果接收到 task_failed 事件，表示任务失败。此时需要关闭 WebSocket 连接并处理错误。
## 返回示例
{
    "session_id": "xxxx",
    "event": "task_failed",
    "trace_id": "0303a2882bf18235ae7a809ae0f3cca7",
    "base_resp": {
        "status_code": 1004,
        "status_msg": "XXXXXXX"
    }
}

